[0m[[0minfo[0m] [0m[32mListsSuite:[0m[0m
[0m[[0minfo[0m] [0m[32m- one plus one is two[0m[0m
[0m[[0minfo[0m] [0m[32m- one plus one is three?[0m[0m
[0m[[0minfo[0m] [0m[32m- details why one plus one is not three[0m[0m
[0m[[0minfo[0m] [0m[32m- intNotZero throws an exception if its argument is 0[0m[0m
[0m[[0minfo[0m] [0m[32m- empty List [0m[0m
[0m[[0minfo[0m] [0m[32m- sum of a few numbers[0m[0m
[0m[[0minfo[0m] [0m[32m- sum of a few more numbers[0m[0m
[0m[[0minfo[0m] [0m[32m- max of a few numbers[0m[0m
[0m[[0minfo[0m] [0m[31m- max of empty list *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  java.lang.IllegalArgumentException: java.util.NosuchElementException[0m[0m
[0m[[0minfo[0m] [0m[31m  at example.Lists$.empty$1(Lists.scala:45)[0m[0m
[0m[[0minfo[0m] [0m[31m  at example.Lists$.max(Lists.scala:49)[0m[0m
[0m[[0minfo[0m] [0m[31m  at example.ListsSuite$$anonfun$9.apply$mcV$sp(ListsSuite.scala:139)[0m[0m
[0m[[0minfo[0m] [0m[31m  at example.ListsSuite$$anonfun$9.apply(ListsSuite.scala:139)[0m[0m
[0m[[0minfo[0m] [0m[31m  at example.ListsSuite$$anonfun$9.apply(ListsSuite.scala:139)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.FunSuite$$anon$1.apply(FunSuite.scala:1265)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.Suite$class.withFixture(Suite.scala:1974)[0m[0m
[0m[[0minfo[0m] [0m[31m  at example.ListsSuite.withFixture(ListsSuite.scala:27)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.FunSuite$class.invokeWithFixture$1(FunSuite.scala:1262)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.FunSuite$$anonfun$runTest$1.apply(FunSuite.scala:1271)[0m[0m
[0m[[0minfo[0m] [0m[31m  ...[0m[0m
